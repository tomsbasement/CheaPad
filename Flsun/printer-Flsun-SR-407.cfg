# !Flsun SR
# printer_size: φ260x330
# MKS Nano V3
# make menuconfig--STM32F407--48KiB bootloader--8MHZ--USB(PA11/PA12)
# The "make flash" command does not work on the MKS Robin. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "Robin_nano_v3.bin" on an SD card and then restart the
# MKS Robin with that SD card.

[include mainsail.cfg]
[include timelapse.cfg]

[display_status]

[stepper_a]
step_pin: PE3
dir_pin: PE2  
enable_pin: !PE4
microsteps: 16
rotation_distance: 40  
endstop_pin: PA15 
homing_speed: 90
position_endstop: 336
arm_length: 315

[stepper_b]
step_pin: PE0
dir_pin: PB9   
enable_pin: !PE1
microsteps: 16
rotation_distance: 40
endstop_pin: PD2  
position_endstop: 336
arm_length: 315

[stepper_c]
step_pin: PB5
dir_pin: PB4   
enable_pin: !PB8
microsteps: 16
rotation_distance: 40
endstop_pin: PC4  
position_endstop: 336
arm_length: 315

[extruder]
step_pin: PD6
dir_pin: !PD3
enable_pin: !PB3
microsteps: 16
rotation_distance: 7.805
nozzle_diameter: 0.4
filament_diameter: 1.750
heater_pin: PE5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
min_temp: -5
max_temp: 275
pressure_advance: 0.04
control: pid
pid_Kp: 18.240
pid_Ki: 0.558
pid_Kd: 149.109
max_extrude_cross_section: 110 
max_extrude_only_distance: 500
#[extruder1]
#step_pin: PC1
#dir_pin: !PC3
#enable_pin: !PC7
#heater_pin: PH4
#sensor_pin: PK7
#...

[heater_bed]
heater_pin: PA0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
min_temp: 0
max_temp: 115
control: pid
pid_Kp: 71.041
pid_Ki: 1.422
pid_Kd: 887.123

[input_shaper]
shaper_freq_x: 25.00  # frequency for the X mark of the test model
shaper_freq_y: 23.29  # frequency for the Y mark of the test model

[mcu]
#ls /dev/serial/by-id/*
serial: /dev/serial/by-path/platform-5200000.ehci1-controller-usb-0:1.4:1.0
#[temperature_sensor raspberry_pi] #pi的温度
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100
#[temperature_sensor mcu_temp] #主板的温度
#sensor_type: temperature_mcu
#min_temp: 0
#max_temp: 100

[printer]
kinematics: delta
max_velocity: 300 
max_accel: 4000 
minimum_cruise_ratio: 0
square_corner_velocity: 5 
max_z_velocity: 300 
delta_radius: 151.7
print_radius: 132
minimum_z_position: -10

[delta_calibrate]
radius: 120
horizontal_move_z: 25
Speed: 10

[fan]
pin: PC14

[heater_fan heat_sink_fan]
pin: PB0

[probe] 
pin: !PC8
x_offset: 0  
y_offset: 0
z_offset: 16.85  
speed: 10  
samples: 3 
samples_result: average 
sample_retract_dist: 3 
samples_tolerance: 0.02 
samples_tolerance_retries: 5 

[bed_mesh]  
speed: 90 
horizontal_move_z: 25 
mesh_radius: 120  
mesh_origin: 0,0  
round_probe_count: 7 
algorithm: bicubic

[mcu rpi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: rpi:None
spi_speed: 2000000
spi_bus: spidev2.0

[resonance_tester]
accel_chip: adxl345
accel_per_hz: 70
probe_points:
    0,0,100

[filament_switch_sensor filament_sensor]  
pause_on_runout: True
runout_gcode: PAUSE 
switch_pin: PA4

[pause_resume]

[gcode_macro PAUSE] 
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(0) %}      #edit to your park position
    {% set y = params.Y|default(-120) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]  
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% if printer["filament_switch_sensor filament_sensor"].filament_detected == True %} 
      {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
      {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
      {%else %}
        {% set get_params = "" %}
      {% endif %}
    ##### end of definitions #####
      G91
      {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E{e} F2100
      {% else %}
        {action_respond_info("Extruder not hot enough")}
      {% endif %}   
      RESUME_BASE {get_params}
    {% endif %} 

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  G28


[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1

[gcode_macro ZDOWN]
gcode:
   SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1

[gcode_macro UNLOAD_FILAMENT] 
gcode:
    G91
    G1 E20 F800
    G1 E-1000 F800
    G90

[gcode_macro LOAD_FILAMENT] 
gcode:
    G91
    G1 E950 F800
    G1 E50 F300
    G90

[save_variables]
filename: ~/savedVariables1.cfg

[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
        {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
        {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:  
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}

        _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}

        { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}|

[gcode_macro bed_level_1]
gcode:
  SET_GCODE_OFFSET Z=0
  G28
  delta_calibrate
  G1 X0 Y0 Z50 F4200
  G28
  CX_SAVE_CONFIG

[gcode_macro bed_level_2]
gcode:
  G28
  G1 X0 Y0 Z50 F4200
  bed_mesh_calibrate
  G1 X0 Y0 Z50 F4200
  G28
  CX_SAVE_CONFIG

[tmc2209 stepper_a]
uart_pin: PD5
run_current: 1.138
stealthchop_threshold: 999999

#sense_resistor: 0.110
#interpolate: True
#diag_pin: ^PE5      # Set to MCU pin connected to TMC DIAG pin
#driver_SGTHRS: 60   # 255 is most sensitive value, 0 is least sensitiv      # Set to MCU pin connected to TMC DIAG pin


[tmc2209 stepper_b]
uart_pin: PD7
run_current: 1.138
stealthchop_threshold: 999999

#sense_resistor: 0.110
#interpolate: True
#diag_pin: ^PJ1      # Set to MCU pin connected to TMC DIAG pin
#driver_SGTHRS: 60  # 255 is most sensitive value, 0 is least sensitiv

[tmc2209 stepper_c]
uart_pin: PD4
#interpolate: True
run_current: 1.138
#sense_resistor: 0.110
stealthchop_threshold: 999999
#diag_pin: ^PD2     # Set to MCU pin connected to TMC DIAG pin
#driver_SGTHRS: 255  # 255 is most sensitive value, 0 is least sensitiv

[tmc2209 extruder]
uart_pin: PD9
#interpolate: True
run_current: 1.1
#sense_resistor: 0.110
stealthchop_threshold: 999999

#[tmc2209 stepper_e1]
#uart_pin: PB6
##interpolate: True
#run_current: 0.8
#sense_resistor: 0.110
#stealthchop_threshold: 0


[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC0, EXP1_3=PH0, EXP1_5=PA1, EXP1_7=PA5, EXP1_9=<GND>,
    EXP1_2=PC2, EXP1_4=PH1, EXP1_6=PA3, EXP1_8=PA7, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PB3, EXP2_3=PC6, EXP2_5=PC4, EXP2_7=PL0,  EXP2_9=<GND>,
    EXP2_2=PB1, EXP2_4=PB0, EXP2_6=PB2, EXP2_8=PG0, EXP2_10=<NC>
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "ssp1"
# See the MKS Lcd Config path file for definitions of common LCD displays.
#[include mks_lcd_12864.cfg]

#[bltouch]
#sensor_pin: ^PD2
#control_pin:PB5
#x_offset: -44
#y_offset: -14
#z_offset: 3.099
#speed: 10.0
#samples: 2
#samples_result: median
#sample_retract_dist: 3.0
#samples_tolerance: 0.1
#samples_tolerance_retries: 1

#[safe_z_home]
#home_xy_position: 100,100 # Change coordinates to the center of your print bed
#speed: 50
#z_hop: 10                 # Move up 10mm
#z_hop_speed: 5

[gcode_arcs]
resolution: 1.0

[exclude_object]

#####################################################################
#      Temperature sensors
#####################################################################

[temperature_sensor host]
sensor_type: temperature_host

[temperature_sensor mcu]
sensor_type: temperature_mcu