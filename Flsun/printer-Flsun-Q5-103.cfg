# !Flsun Q5
# printer_size: φ220x270
# This file contains common configurations and pin mappings
# for the Flsun Q5 using the MKS Robin Nano board. 
# To use this config, the firmware should be compiled for the
# STM32F103. When running "make menuconfig", enable "extra low-level
# configuration setup", select the 28KiB bootloader, and serial (on
# USART3 PB11/PB10) communication.
# Note that the "make flash" command does not work with MKS Robin
# boards. After running "make", run the following command:
# if chip is stm32F103 use ./scripts/update_mks_robin.py out/klipper.bin out/Robin_nano.bin
# if chip is stm32F407 direct rename klipper.bin to Robin_nano35.bin
# Copy the file out/Robin_nano.bin to an SD card and then restart the
# printer with that SD card.
# See docs/Config_Reference.md for a description of parameters.

[include mainsail.cfg]
[include timelapse.cfg]

[display_status]

[mcu rpi]
serial: /tmp/klipper_host_mcu

[mcu]
serial: /dev/serial/by-path/platform-5200000.ehci1-controller-usb-0:1.4:1.0-port0
restart_method: command

[stepper_a]
step_pin: PE3
dir_pin: PE2
enable_pin: !PE4
microsteps: 16
rotation_distance: 40
endstop_pin: PA15
homing_speed: 30
homing_retract_dist: 5
homing_retract_speed: 10
second_homing_speed: 2
#position_endstop: 210
#arm_length: 215
angle: 210

[stepper_b]
step_pin: PE0
dir_pin: PB9
enable_pin: !PE1
microsteps: 16
rotation_distance: 40
endstop_pin: PA12
angle: 330

[stepper_c]
step_pin: PB5
dir_pin: PB4
enable_pin: !PB8
microsteps: 16
rotation_distance: 40
endstop_pin: PC4
angle: 90

[extruder]
step_pin: PD6
dir_pin: !PD3
enable_pin: !PB3
microsteps: 16
rotation_distance: 8.71
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC3
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
control: pid
pid_Kp: 14.529
pid_Ki: 0.557
pid_Kd: 94.802
min_temp: 0
max_temp: 265
max_extrude_cross_section: 70 
max_extrude_only_distance: 500

[heater_bed]
heater_pin: PA0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
control: pid
pid_Kp: 325.10
pid_Ki: 63.35
pid_Kd: 417.10
min_temp: 0
max_temp: 115

[fan]
pin: PB1

[printer]
kinematics: delta
max_velocity: 200 #最大打印速度
max_accel: 3000 #最大加速度
max_accel_to_decel: 2000  #最大加速度到减速度
square_corner_velocity: 5 #直角速度
max_z_velocity: 200 #最大Z速度
delta_radius: 104.5
print_radius: 102
minimum_z_position: -5 #最小Z高度

[delta_calibrate]
radius: 90
horizontal_move_z: 28
Speed: 10

[probe]  #相当于G33
pin: !PA11
x_offset: 0  #调平开关的偏移量
y_offset: 0
z_offset: 16.2  #调平开关与喷准之间的Z高度
speed: 10  #速度
samples: 3 #点几下
samples_result: average  #平均
sample_retract_dist: 3 #探点上下的距离
samples_tolerance: 0.02 #精度，容忍度 要到0.02才可以
samples_tolerance_retries: 5 #重复的次数

[bed_mesh]  #相当于G29
speed: 50 #速度
horizontal_move_z: 25 #抬升高度？
mesh_radius: 90  #调平半径
mesh_origin: 0,0  #原点
round_probe_count: 7 #点数7*7的网格
algorithm: bicubic

[filament_switch_sensor filament_sensor]  #断料检测
pause_on_runout: True
runout_gcode: PAUSE #没耗材执行动作
switch_pin: PA4

[pause_resume]

[gcode_macro PAUSE] #暂停
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(0) %}      #edit to your park position
    {% set y = params.Y|default(-90) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]  #继续打印
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% if printer["filament_switch_sensor filament_sensor"].filament_detected == True %} #判断耗材传感器是否有耗材，true代表有耗材
      {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
      {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
      {%else %}
        {% set get_params = "" %}
      {% endif %}
    ##### end of definitions #####
      G91
      {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E{e} F2100
      {% else %}
        {action_respond_info("Extruder not hot enough")}
      {% endif %}   
      RESUME_BASE {get_params}
    {% endif %} 

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  G28

[gcode_macro UNLOAD_FILAMENT] #unload filament
gcode:
    G91
    G1 E-600 F800
    G90

[gcode_macro LOAD_FILAMENT] #load filament
gcode:
    G91
    G1 E550 F800
    G1 E50 F300
    G90

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1

[gcode_macro ZDOWN]
gcode:
   SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1

[save_variables]
filename: ~/savedVariables1.cfg

[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
        {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
        {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:  
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
        _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
        { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}|
    

[gcode_arcs]
resolution: 1.0

[exclude_object]

#####################################################################
#      Temperature sensors
#####################################################################

[temperature_sensor host]
sensor_type: temperature_host

[temperature_sensor mcu]
sensor_type: temperature_mcu

[gcode_macro bed_level_1]
gcode:
  SET_GCODE_OFFSET Z=0
  G28
  delta_calibrate
  G1 X0 Y0 Z50 F4200
  G28
  save_config

[gcode_macro bed_level_2]
gcode:
  G28
  G1 X0 Y0 Z50 F4200
  bed_mesh_calibrate
  G1 X0 Y0 Z50 F4200
  G28
  save_config

[idle_timeout]
gcode:
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [stepper_a]
#*# arm_length = 215.000000
#*# position_endstop = 208.674674
#*#
#*# [stepper_b]
#*# arm_length = 215.000000
#*# position_endstop = 213.397730
#*#
#*# [stepper_c]
#*# arm_length = 215.000000
#*# position_endstop = 212.693767
#*#
#*# [delta_calibrate]
#*# height0 = 16.2
#*# height0_pos = 15638.000,15638.000,15638.000
#*# height1 = 16.2
#*# height1_pos = 19610.667,19610.667,13522.667
#*# height2 = 16.2
#*# height2_pos = 15045.667,21781.667,15045.667
#*# height3 = 16.2
#*# height3_pos = 13352.000,18687.000,18687.000
#*# height4 = 16.2
#*# height4_pos = 14988.667,14988.667,19783.667
#*# height5 = 16.2
#*# height5_pos = 18399.000,13770.000,18399.000
#*# height6 = 16.2
#*# height6_pos = 20956.333,15256.333,15256.333
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  1.169977, 1.169977, 1.169977, 1.169977, 1.169977, 1.169977, 1.169977
#*# 	  1.152514, 1.152514, 0.740977, 0.577189, 0.748991, 1.080238, 1.080238
#*# 	  0.873906, 0.873906, 0.347128, 0.159199, 0.308863, 0.659035, 0.659035
#*# 	  1.486552, 0.882484, 0.324232, 0.017890, 0.061833, 0.343626, 0.789642
#*# 	  1.000560, 1.000560, 0.563823, 0.210506, 0.113166, 0.299359, 0.299359
#*# 	  1.291078, 1.291078, 0.887178, 0.645922, 0.493022, 0.498435, 0.498435
#*# 	  1.170510, 1.170510, 1.170510, 1.170510, 1.170510, 1.170510, 1.170510
#*# tension = 0.2
#*# min_x = -90.0
#*# algo = bicubic
#*# y_count = 7
#*# mesh_y_pps = 2
#*# min_y = -90.0
#*# x_count = 7
#*# max_y = 90.0
#*# mesh_x_pps = 2
#*# max_x = 90.0