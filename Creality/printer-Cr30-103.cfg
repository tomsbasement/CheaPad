# !CR-30 PrintMill
# printer_size: 200x170x*
# version: 3.5
# This file contains pin mappings for the Creality CR-30 PrintMill v4.2.10 board. To
# use this config, during "make menuconfig" select the STM32F103 with
# a "28KiB bootloader" and serial (on USART1 PA10/PA9) communication.
# If you prefer a direct serial connection, in "make menuconfig"
# select "Enable extra low-level configuration options" and select
# serial (on USART3 PB11/PB10)
# Flash this firmware by copying "out/klipper.bin" to a SD card and
# turning on the printer with the card inserted. The firmware
# filename must end in ".bin" and must not match the last filename
# that was flashed.
# See docs/Config_Reference.md for a description of parameters.

[include mainsail.cfg]
[include timelapse.cfg]

[display_status]

[mcu rpi]
serial: /tmp/klipper_host_mcu
# for display messages in status panel

[pause_resume]
# for pause/resume functionality. 
# Mainsail/fluidd needs gcode macros for `PAUSE`, `RESUME` and `CANCEL_PRINT` to make the buttons work.

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z4.5 F300
    G90
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
    G28 X Y
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    G1 Y{y_park} F2000
    M84
  CANCEL_PRINT_BASE

[stepper_x]
step_pin: PC2
dir_pin: !PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^!PA3
position_endstop: 0
position_max: 220
homing_speed: 50

[stepper_y]
step_pin: PB8
dir_pin: !PB7
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^!PA7
position_endstop: 0.725
position_max: 240
homing_speed: 50

[stepper_z]
step_pin: PB6
dir_pin: !PB5
enable_pin: !PC3
microsteps: 16
rotation_distance: 2.7128
endstop_pin: ^!PA5
position_endstop: 0
position_min: -250
position_max: 20000000

[extruder]
max_extrude_cross_section: 50.0
step_pin: PB4
dir_pin: !PB3
enable_pin: !PC3
microsteps: 16
rotation_distance: 22.7434
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
control: pid
pid_Kp: 24.270
pid_Ki: 1.798
pid_Kd: 81.910
min_temp: 0
max_temp: 265
max_extrude_only_distance: 500

[force_move]
enable_force_move: True

[filament_switch_sensor filament_sensor]
pause_on_runout: True
switch_pin: ^!PA6

[heater_bed]
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
control: pid
pid_Kp: 65.525
pid_Ki: 1.021
pid_Kd: 1051.671
min_temp: 0
max_temp: 130
# K-FAN1

[fan]
pin: PA2
# K-FAN2

[heater_fan extruder]
pin: PC0
heater: extruder
heater_temp: 50.0
# K-FAN3

[temperature_fan mcu]
pin: PC1
sensor_type: temperature_mcu
control: watermark
min_temp: 0
max_temp: 100
target_temp: 30

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[bed_screws]
screw1: 10, 0.725
screw2: 190, 0.725
screw3: 190, 190
screw4: 10, 190

[printer]
kinematics: corexy
max_velocity: 300
max_accel: 5000
max_z_velocity: 5
max_z_accel: 100
square_corner_velocity: 5.0
# Override to support unlimited belt size
# (homing Z simply resets its virtual position to 0.0)

[homing_override]
axes: z
set_position_z: 0
gcode:
  {% if params.X is not defined and params.Y is not defined and params.Z is not defined %}G28 X0 Y0{% endif %}
  {% if params.X is defined %}G28 X0{% endif %}
  {% if params.Y is defined %}G28 Y0{% endif %}
  G92 Z0
# Eject all printed parts from the belt

[gcode_macro BED_EJECT]
gcode:
  TURN_OFF_HEATERS
  G28 ; Re-home
  G1 X50 Y50 F6000 ; Move hotend out of the way of the belt
  G1 Z420 F4000 ; Unload belt
  G28 Z0 ; Re-home Z
# Enable SD file loop support

[sdcard_loop]
# 'Marlin' style M808 compatibility macro for SDCard looping

[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}

[gcode_arcs]
resolution: 1.0

[exclude_object]

#####################################################################
#      Temperature sensors
#####################################################################

[temperature_sensor host]
sensor_type: temperature_host

[temperature_sensor mcu]
sensor_type: temperature_mcu