# This file contains common pin mappings for MKS Robin Nano (v1.2.004)
# boards. To use this config, the firmware should be compiled for the
# STM32F103. When running "make menuconfig", enable "extra low-level
# configuration setup", select the 28KiB bootloader, and serial (on
# USART3 PB11/PB10) communication.

# Note that the "make flash" command does not work with MKS Robin
# boards. After running "make", run the following command:
#   ./scripts/update_mks_robin.py out/klipper.bin out/Robin_nano.bin
# Copy the file out/Robin_nano.bin to an SD card and then restart the
# printer with that SD card.

# See docs/Config_Reference.md for a description of parameters.

# Thanks to @Guilouz, @Maxime3D77 and @GregÂ² for these files !

[include mainsail.cfg]
[include timelapse.cfg]

[display_status]

[mcu rpi]
serial: /tmp/klipper_host_mcu

######################################################
#################   Wanhao D12 - 230   ###############
######################################################

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[stepper_x]
step_pin: PE3
dir_pin: PE2
enable_pin: !PE4
microsteps: 16
rotation_distance: 40
endstop_pin: !PA15
position_endstop: 0
position_max: 235
homing_speed: 50

[stepper_y]
step_pin: PE0
dir_pin: !PB9
enable_pin: !PE1
microsteps: 16
rotation_distance: 40
endstop_pin: !PA12
position_endstop: 0
position_max: 235
homing_speed: 50

[stepper_z]
step_pin: PB5
dir_pin: !PB4
enable_pin: !PB8
microsteps: 16
rotation_distance: 8
endstop_pin: !PA11  # Uncomment if NO BLtouch used
#endstop_pin:probe:z_virtual_endstop #Commanter si pas de BLTouch
position_endstop: 0 # Uncomment if NO BLtouch used
position_min: -5
position_max: 250

[extruder]
step_pin: PD6
dir_pin: !PD3
enable_pin: !PB3
full_steps_per_rotation: 200
microsteps: 16
rotation_distance: 7.157 # BMG clone Valeur configuration extrusion
min_extrude_temp: 185 # The minimum temperature (in Celsius) at which extruder move
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC3
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
control: pid
pid_Kp: 22.501
pid_Ki: 0.843
pid_Kd: 150.192
min_temp: 5
max_temp: 260
max_extrude_only_distance: 500
max_extrude_only_velocity: 200
max_extrude_only_accel: 2750
max_extrude_cross_section: 5
#pressure_advance: 0 # For Input Shaper test
#pressure_advance: 0.065
#pressure_advance_smooth_time: 0.040

[extruder_stepper belted_extruder] #T1
extruder: extruder
step_pin: PA6
dir_pin: !PA1
enable_pin: !PA3
full_steps_per_rotation: 200
microsteps: 16
rotation_distance: 7.952

[heater_bed]
heater_pin: PA0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
min_temp: 5
max_temp: 100
control: pid
pid_Kp: 62.805
pid_Ki: 1.055
pid_Kd: 935.009

[fan]
pin: PB1

[printer]
kinematics: cartesian
max_velocity: 500 # Trolololo
max_accel: 2400
minimum_cruise_ratio: 0
square_corner_velocity: 5
max_z_velocity: 10
max_z_accel: 100

[input_shaper]
shaper_freq_x: 87.0
shaper_type_x: ei
shaper_freq_y: 44.8
shaper_type_y: mzv
 
[safe_z_home]
home_xy_position: 195,157
speed: 100.0
z_hop: 10.0
z_hop_speed: 10.0

[bed_mesh]
speed: 80
horizontal_move_z: 8
mesh_min: 50,50
mesh_max: 180, 210
probe_count: 5,5
fade_start: 1.0
fade_end: 10
mesh_pps: 2,2

[safe_z_home]
home_xy_position: 115,115
speed: 100.0
z_hop: 10.0
z_hop_speed: 10.0

[screws_tilt_adjust]
screw1: 55,55
screw1_name: Front left screw
screw2: 55,255
screw2_name: Rear left screw
screw3: 255,55
screw3_name: Front right screw
screw4: 255,255
screw4_name: Rear right screw
horizontal_move_z: 10
speed: 200
screw_thread: CW-M3

[bed_screws]
screw1: 20,20
screw1_name: Front left screw
screw2: 20,290
screw2_name: Rear left screw
screw3: 290,290
screw3_name: Rear right screw
screw4: 290,20
screw4_name: Front right screw

#####################################################################
# 	Additional sensors
#####################################################################

[filament_switch_sensor E0]
pause_on_runout: True
switch_pin: PA4

[filament_switch_sensor E1]
pause_on_runout: True
switch_pin: PE6

[temperature_sensor host]
sensor_type: temperature_host

[temperature_sensor mcu]
sensor_type: temperature_mcu

[gcode_arcs]
resolution: 1.0

[exclude_object]
################
###  Macros  ###
################

#Merci a Guilouz (https://github.com/Guilouz/Klipper-Flsun-Speeder-Pad) pour les macro suivante.
#UNLOAD_FILAMENT
#LOAD_FILAMENT
#PID_BED_65
#PID_HOTEND_220
#ADXL_TEST
#ADXL_NOISE
#ADXL_AXE_X
#ADXL_AXE_Y
#SAVE
#M201
#M203
#M204
#M205

# ====================== Z_OFFSET ================================

[gcode_macro Z_OFFSET]
description: Mesuser le Z-Offset
gcode:
  G28
  PROBE_CALIBRATE



[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}
    ;Put printing message on LCD screen
    M117 Heating... 
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Run Bed leveling
    BED_MESH_CALIBRATE
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    G1 Z5.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X0.1 Y20 Z0.3 F5000.0 ; Move to start position
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    # Run Cura start Gcode to clean nozzle
    G92 E0 ; reset extruder
    G1 Z1.0 F3000 ; move z up little to prevent scratching of surface
    G1 X2 Y20 Z0.3 F5000.0 ; move to start-line position
    G1 X2 Y200.0 Z0.3 F1500.0 E15 ; draw 1st line
    G1 X2 Y200.0 Z0.4 F5000.0 ; move to side a little
    G1 X2 Y20 Z0.4 F1500.0 E30 ; draw 2nd line
    G92 E0 ; reset extruder
    G1 Z1.0 F3000 ; move z up little to prevent scratching of surface

[gcode_macro END_PRINT]
gcode:
    M104 T0 S0
    M104 T1 S0
    M140 S0
    G92 E1
    G1 E-1 F300
    G28 X0 Y0
    M84

[gcode_macro G29]
gcode:
    BED_MESH_CALIBRATE
 
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
  CHANGE_FILAMENT  

[gcode_macro M601]
gcode:
    CHANGE_FILAMENT

[gcode_macro CHANGE_FILAMENT]
 gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
       ,M104 S0                                                                              ; turn off hotend
	   G91
	   G0 E2 F400
	   G0 E-5 F800
	   G0 E-70 F800
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


##################################################
# Chargement / Retrait du filament
##################################################

[gcode_macro UNLOAD_FILAMENT]
description: Retrait du filament
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
  RESPOND TYPE=error MSG="Impossible de lancer cette macro actuellement !"
  {% else %}
  SAVE_GCODE_STATE NAME=unload_state
  {% if printer.extruder.temperature < 200 %}
  RESPOND MSG="Chauffe..."
  M109 S200
  {% endif %}
  RESPOND MSG="Retrait du filament..."
  G91
  G0 E2 F400
  G0 E-5 F800
  G0 E-70 F800
  RESTORE_GCODE_STATE NAME=unload_state
  {% endif %}


[gcode_macro LOAD_FILAMENT]
description: Chargement du filament
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
  RESPOND TYPE=error MSG="Impossible de lancer cette macro actuellement !"
  {% else %}
  SAVE_GCODE_STATE NAME=load_state
  {% if printer.extruder.temperature < 200 %}
  RESPOND MSG="Chauffe..."
  M109 S200
  {% endif %}
  RESPOND MSG="Chargement du filament..."
  G91
  G0 E70 F300
  G0 E20 F200
  M400
  RESTORE_GCODE_STATE NAME=load_state
  {% endif %}


##################################################
# Calibration du PID Buse / Plateau
##################################################

[gcode_macro CALIBRATION_PID_BED_60]
description: PID Plateau
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="Impossible de lancer cette macro actuellement !"
  {% else %}
  G28
  G1 Z50 F1500
  RESPOND MSG="PID du plateau en cours..."
  PID_CALIBRATE HEATER=heater_bed TARGET={params.TEMP|default(60)}
  G28
  SAVE_CONFIG
  {% endif %}


[gcode_macro CALIBRATION_PID_HOTEND_200]
description: PID Hotend
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="Impossible de lancer cette macro actuellement !"
  {% else %}
  G28
  G1 Z50 F1500
  RESPOND MSG="PID de la buse en cours..."
  PID_CALIBRATE HEATER=extruder TARGET={params.TEMP|default(200)}
  G28
  SAVE_CONFIG
  {% endif %}

#[gcode_macro M900]
#gcode:
#  {% if 'K' in params %}
#    {% if 'E' in params %}
#      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
#    {% else %}
#      SET_PRESSURE_ADVANCE ADVANCE={params.K}
#    {% endif %}
#  {% endif %}

##################################################
# Sauvegarde des paramÃ¨tres
##################################################

[gcode_macro SAUVEGARDER]
description: Sauvegarder la configuration
gcode:
  SAVE_CONFIG

##################################################
# Managing Slicer Controls
##################################################

[gcode_macro M201]
description: Sets maximum accelleration.
  Usage: M201 [X<accel>] [Y<accel>]
gcode:
  {% if 'X' in params or 'Y' in params %}
  {% set accel = (params.X|default(params.Y)|float, params.Y|default(params.X)|float)|min %}
  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel * 0.5}
  {% else %}
  SET_VELOCITY_LIMIT
  {% endif %}


[gcode_macro M203]
description: Sets maximum velocity
  Usage: M203 [X<speed>] [Y<speed>]
gcode:
  {% if 'X' in params or 'Y' in params %}
  {% set speed = (params.X|default(params.Y)|float, params.Y|default(params.X)|float)|min %}
  SET_VELOCITY_LIMIT VELOCITY={speed}
  {% else %}
  SET_VELOCITY_LIMIT
  {% endif %}


[gcode_macro M204]
description: Sets maximum accelleration.
  Usage: M204 [S<accel>] [P<accel> T<accel>]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}
  {% if 'S' in params %}
  {% set s = params.S|float %}
  SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
  {% if 'P' in params %}
  {% set p = params.P|float %}
  {% if 'T' in params %}
  {% set t = params.T|float %}
  {% if p < t %}
  SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
  {% endif %}
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
  {% endif %}
  {% elif 'T' in params %}
  {% set t = params.T|float %}
  SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
  {% endif %}
  {% endif %}


[gcode_macro M205]
description: Sets square corner velocity
  Usage: M205 [X<corner_speed>] [Y<corner_speed>]
gcode:
  {% if 'X' in params or 'Y' in params %}
  {% set corner_speed = (params.X|default(params.Y)|float, params.Y|default(params.X)|float)|min %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={corner_speed}
  {% else %}
  SET_VELOCITY_LIMIT
  {% endif %}

##################################################
# Verifications and Measurements with ADXL
##################################################

[gcode_macro ADXL_TEST]
description: ADXL Test
gcode:
  ACCELEROMETER_QUERY


[gcode_macro ADXL_NOISE]
description: Measure Accelerometer Noise
gcode:
  MEASURE_AXES_NOISE


[gcode_macro ADXL_AXE_X]
description: Measure X axis resonances
gcode:
  G28
  M400
  SHAPER_CALIBRATE AXIS=X


[gcode_macro ADXL_AXE_Y]
description: Measure Y axis resonances
gcode:
  G28
  M400
  SHAPER_CALIBRATE AXIS=Y

[gcode_macro SECURITY_OFFSET]
description: Apply a 2mm Safety Offset
gcode:
  SET_GCODE_OFFSET Z=+2
  RESPOND MSG="Safety Offset applied!"
